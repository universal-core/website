"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[72305],{58860:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>m});var o=t(37953);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),d=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=d(e.components);return o.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(t),h=r,m=u["".concat(p,".").concat(h)]||u[h]||c[h]||a;return t?o.createElement(m,i(i({ref:n},l),{},{components:t})):o.createElement(m,i({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=h;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var d=2;d<a;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},68022:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>p,default:()=>v,frontMatter:()=>s,metadata:()=>d,toc:()=>u});t(37953);var o=t(58860);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const s={title:"Show",swizzle:!0},p=void 0,d={unversionedId:"ui-integrations/chakra-ui/components/basic-views/show/index",id:"ui-integrations/chakra-ui/components/basic-views/show/index",title:"Show",description:"`` provides us a layout for displaying the page. It does not contain any logic and just adds extra functionalities like a refresh button or giving title to the page.",source:"@site/docs/ui-integrations/chakra-ui/components/basic-views/show/index.md",sourceDirName:"ui-integrations/chakra-ui/components/basic-views/show",slug:"/ui-integrations/chakra-ui/components/basic-views/show/",permalink:"/docs/ui-integrations/chakra-ui/components/basic-views/show/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/ui-integrations/chakra-ui/components/basic-views/show/index.md",tags:[],version:"current",lastUpdatedBy:"Matteo Roggia",lastUpdatedAt:1741812574,formattedLastUpdatedAt:"Mar 12, 2025",frontMatter:{title:"Show",swizzle:!0},sidebar:"mainSidebar",previous:{title:"List",permalink:"/docs/ui-integrations/chakra-ui/components/basic-views/list/"},next:{title:"Clone",permalink:"/docs/ui-integrations/chakra-ui/components/buttons/clone-button/"}},l={},u=[{value:"Properties",id:"properties",level:2},{value:"title",id:"title",level:3},{value:"resource",id:"resource",level:3},{value:"canDelete and canEdit",id:"candelete-and-canedit",level:3},{value:"recordItemId",id:"recorditemid",level:3},{value:"dataProviderName",id:"dataprovidername",level:3},{value:"goBack",id:"goback",level:3},{value:"isLoading",id:"isloading",level:3},{value:'breadcrumb <GlobalConfigBadge id="core/refine-component/#breadcrumb" />',id:"breadcrumb-",level:3},{value:"wrapperProps",id:"wrapperprops",level:3},{value:"headerProps",id:"headerprops",level:3},{value:"contentProps",id:"contentprops",level:3},{value:"headerButtons",id:"headerbuttons",level:3},{value:"headerButtonProps",id:"headerbuttonprops",level:3},{value:"footerButtons",id:"footerbuttons",level:3},{value:"footerButtonProps",id:"footerbuttonprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Props",id:"props",level:3}],c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.yg)("div",n)},h=c("DocThumbsUpDownFeedbackWidget"),m=c("GlobalConfigBadge"),g=c("PropsTable"),f={toc:u},y="wrapper";function v(e){var{components:n}=e,t=i(e,["components"]);return(0,o.yg)(y,a(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},o=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),o.forEach((function(n){r(e,n,t[n])}))}return e}({},f,t),{components:n,mdxType:"MDXLayout"}),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'const { default: simpleRest } = RefineSimpleRest;\nsetRefineProps({\n  dataProvider: simpleRest("https://api.fake-rest.refine.dev"),\n  Layout: RefineChakra.Layout,\n  Sider: () => null,\n});\n\nconst Wrapper = ({ children }) => {\n  return (\n    <ChakraUI.ChakraProvider theme={RefineChakra.refineTheme}>\n      {children}\n    </ChakraUI.ChakraProvider>\n  );\n};\n\nconst DummyListPage = () => (\n  <ChakraUI.VStack alignItems="flex-start">\n    <ChakraUI.Text>This page is empty.</ChakraUI.Text>\n    <ShowButton colorScheme="black" recordItemId="123">\n      Show Item 123\n    </ShowButton>\n  </ChakraUI.VStack>\n);\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\ninterface IPost {\n  id: number;\n  title: string;\n  content: string;\n  status: "published" | "draft" | "rejected";\n  category: { id: number };\n}\n')),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"<Show>")," provides us a layout for displaying the page. It does not contain any logic and just adds extra functionalities like a refresh button or giving title to the page."),(0,o.yg)("p",null,"We will show what ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show>")," does using properties with examples."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@refinedev/core";\nimport { ShowButton } from "@refinedev/chakra-ui";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { useShow, useOne } from "@refinedev/core";\nimport { Show, MarkdownField } from "@refinedev/chakra-ui";\nimport { Heading, Text, Spacer } from "@chakra-ui/react";\n\nconst PostShow: React.FC = () => {\n  const { queryResult } = useShow<IPost>();\n  const { data, isLoading } = queryResult;\n  const record = data?.data;\n\n  const { data: categoryData } = useOne<ICategory>({\n    resource: "categories",\n    id: record?.category.id || "",\n    queryOptions: {\n      enabled: !!record?.category.id,\n    },\n  });\n\n  return (\n    <Show isLoading={isLoading}>\n      <Heading as="h5" size="sm">\n        Id\n      </Heading>\n      <Text mt={2}>{record?.id}</Text>\n\n      <Heading as="h5" size="sm" mt={4}>\n        Title\n      </Heading>\n      <Text mt={2}>{record?.title}</Text>\n\n      <Heading as="h5" size="sm" mt={4}>\n        Status\n      </Heading>\n      <Text mt={2}>{record?.status}</Text>\n\n      <Heading as="h5" size="sm" mt={4}>\n        Category\n      </Heading>\n      <Text mt={2}>{categoryData?.data?.title}</Text>\n\n      <Heading as="h5" size="sm" mt={4}>\n        Content\n      </Heading>\n      <Spacer mt={2} />\n      <MarkdownField value={record?.content} />\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <RefineHeadlessDemo\n      notificationProvider={RefineChakra.notificationProvider()}\n      legacyRouterProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,o.yg)("admonition",{title:"Good to know",type:"simple"},(0,o.yg)("p",{parentName:"admonition"},"You can swizzle this component with the ",(0,o.yg)("a",{parentName:"p",href:"/docs/packages/list-of-packages"},(0,o.yg)("strong",{parentName:"a"},"Refine CLI"))," to customize it.")),(0,o.yg)("h2",{id:"properties"},"Properties"),(0,o.yg)("h3",{id:"title"},"title"),(0,o.yg)(h,{id:"title",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"title")," allows the addition of titles inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show>"),' component. If you don\'t pass title props it uses the "Show" prefix and the singular resource name by default. For example, for the "posts" resource, it will be "Show post".'),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@refinedev/core";\nimport { ShowButton } from "@refinedev/chakra-ui";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Show } from "@refinedev/chakra-ui";\nimport { Heading } from "@chakra-ui/react";\n\nconst PostShow: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Show title={<Heading size="lg">Custom Title</Heading>}>\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <RefineHeadlessDemo\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,o.yg)("h3",{id:"resource"},"resource"),(0,o.yg)(h,{id:"resource",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show>")," component reads the ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," information from the route by default. If you want to use a custom resource for the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"resource")," prop."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/custom/123 previewHeight=280px",live:!0,url:"http://localhost:3000/custom/123",previewHeight:"280px"},'setInitialRoutes(["/custom/123"]);\n\nimport { Refine } from "@refinedev/core";\nimport { Layout } from "@refinedev/chakra-ui";\nimport dataProvider from "@refinedev/simple-rest";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\n// visible-block-start\nimport { Show } from "@refinedev/chakra-ui";\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Show resource="categories">\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App: React.FC = () => {\n  return (\n    <Refine\n      legacyRouterProvider={{\n        ...routerProvider,\n        // highlight-start\n        routes: [\n          {\n            element: <CustomPage />,\n            path: "/custom/:id",\n          },\n        ],\n        // highlight-end\n      }}\n      Layout={Layout}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[{ name: "posts" }]}\n    />\n  );\n};\n\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,o.yg)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,o.yg)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,o.yg)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/core/refine-component#identifier"},(0,o.yg)("inlineCode",{parentName:"a"},"identifier")," section of the ",(0,o.yg)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192")))),(0,o.yg)("h3",{id:"candelete-and-canedit"},"canDelete and canEdit"),(0,o.yg)(h,{id:"candelete-and-canedit",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"canDelete")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"canEdit")," allows us to add the delete and edit buttons inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show>")," component. If the resource has ",(0,o.yg)("inlineCode",{parentName:"p"},"canDelete")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"canEdit")," property Refine adds the buttons by default."),(0,o.yg)("p",null,"When clicked on, delete button executes the ",(0,o.yg)("inlineCode",{parentName:"p"},"useDelete")," method provided by the ",(0,o.yg)("a",{parentName:"p",href:"/docs/data/data-provider"},(0,o.yg)("inlineCode",{parentName:"a"},"dataProvider"))," and the edit button redirects the user to the record edit page."),(0,o.yg)("p",null,"Refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>"))," and the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/edit-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<EditButton>"))," documentation for detailed usage."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@refinedev/core";\nimport { ShowButton } from "@refinedev/chakra-ui";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Show } from "@refinedev/chakra-ui";\nimport { usePermissions } from "@refinedev/core";\n\nconst PostShow: React.FC = () => {\n  const { data: permissionsData } = usePermissions();\n\n  return (\n    <Show\n      /* highlight-start */\n      canDelete={permissionsData?.includes("admin")}\n      canEdit={permissionsData?.includes("admin")}\n      /* highlight-end */\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  const simpleRestDataProvider = dataProvider(\n    "https://api.fake-rest.refine.dev",\n  );\n\n  const customDataProvider = {\n    ...simpleRestDataProvider,\n    deleteOne: async ({ resource, id, variables }) => {\n      return {\n        data: {},\n      };\n    },\n  };\n\n  const authProvider = {\n    login: async () => {\n      return {\n        success: true,\n        redirectTo: "/",\n      };\n    },\n    register: async () => {\n      return {\n        success: true,\n      };\n    },\n    forgotPassword: async () => {\n      return {\n        success: true,\n      };\n    },\n    updatePassword: async () => {\n      return {\n        success: true,\n      };\n    },\n    logout: async () => {\n      return {\n        success: true,\n        redirectTo: "/",\n      };\n    },\n    check: async () => ({\n      authenticated: true,\n    }),\n    onError: async (error) => {\n      console.error(error);\n      return { error };\n    },\n    getPermissions: async () => ["admin"],\n    getIdentity: async () => null,\n  };\n\n  return (\n    <RefineHeadlessDemo\n      dataProvider={customDataProvider}\n      authProvider={authProvider}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/authentication/hooks/use-permissions"},(0,o.yg)("inlineCode",{parentName:"a"},"usePermission")," documentation ","\u2192")))),(0,o.yg)("h3",{id:"recorditemid"},"recordItemId"),(0,o.yg)(h,{id:"recorditemid",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"<Show>")," component reads the ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," information from the route by default. ",(0,o.yg)("inlineCode",{parentName:"p"},"recordItemId")," is used when it cannot read from the URL (when used on a custom page, modal or drawer)."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=350px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"350px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@refinedev/core";\nimport { EditButton } from "@refinedev/chakra-ui";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { useModalForm } from "@refinedev/react-hook-form";\nimport { Show } from "@refinedev/chakra-ui";\nimport {\n  Modal,\n  Button,\n  ModalOverlay,\n  ModalContent,\n  ModalCloseButton,\n  ModalHeader,\n  ModalBody,\n} from "@chakra-ui/react";\n\nconst PostShow: React.FC = () => {\n  const {\n    modal: { visible, close, show },\n    id,\n  } = useModalForm({\n    refineCoreProps: { action: "show" },\n  });\n\n  return (\n    <div>\n      <Button onClick={() => show()}>Edit Button</Button>\n      <Modal isOpen={visible} onClose={close} size="xl">\n        <ModalOverlay />\n        <ModalContent>\n          <ModalCloseButton />\n          <ModalHeader>Show</ModalHeader>\n\n          <ModalBody>\n            {/* highlight-next-line */}\n            <Show recordItemId={id}>\n              <p>Rest of your page here</p>\n            </Show>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </div>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <RefineHeadlessDemo\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,o.yg)("admonition",{title:"Implementation Tips",type:"simple"},(0,o.yg)("p",{parentName:"admonition"},"The ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit>")," component needs the ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," information for the ",(0,o.yg)("inlineCode",{parentName:"p"},"<RefreshButton>")," to work properly."))),(0,o.yg)("h3",{id:"dataprovidername"},"dataProviderName"),(0,o.yg)(h,{id:"dataprovidername",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If not specified, Refine will use the default data provider. If you have multiple data providers and want to use a different one, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"dataProviderName")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { Show } from "@refinedev/chakra-ui";\n\n// highlight-start\nconst PostShow = () => {\n  return <Show dataProviderName="other">...</Show>;\n};\n// highlight-end\n\nexport const App: React.FC = () => {\n  return (\n    <Refine\n      // highlight-start\n      dataProvider={{\n        default: dataProvider("https://api.fake-rest.refine.dev/"),\n        other: dataProvider("https://other-api.fake-rest.refine.dev/"),\n      }}\n      // highlight-end\n    >\n      {/* ... */}\n    </Refine>\n  );\n};\n'))),(0,o.yg)("h3",{id:"goback"},"goBack"),(0,o.yg)(h,{id:"goback",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To customize the back button or to disable it, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"goBack")," property. You can pass ",(0,o.yg)("inlineCode",{parentName:"p"},"false")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"null")," to hide the back button."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts", "/posts/show/123"]);\nimport { Refine } from "@refinedev/core";\nimport { ShowButton } from "@refinedev/chakra-ui";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Show } from "@refinedev/chakra-ui";\n/* highlight-next-line */\nimport { IconMoodSmile } from "@tabler/icons-react";\n\nconst PostShow: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Show goBack={<IconMoodSmile />}>\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <RefineHeadlessDemo\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,o.yg)("h3",{id:"isloading"},"isLoading"),(0,o.yg)(h,{id:"isloading",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To toggle the loading state of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Edit/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"isLoading")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@refinedev/core";\nimport { ShowButton } from "@refinedev/chakra-ui";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Show } from "@refinedev/chakra-ui";\n\nconst PostShow: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Show isLoading={true}>\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <RefineHeadlessDemo\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,o.yg)("h3",{id:"breadcrumb-"},"breadcrumb ",(0,o.yg)(m,{id:"core/refine-component/#breadcrumb",mdxType:"GlobalConfigBadge"})),(0,o.yg)(h,{id:"breadcrumb-",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default it uses the ",(0,o.yg)("inlineCode",{parentName:"p"},"Breadcrumb")," component from ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/chakra-ui")," package."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@refinedev/core";\nimport { ShowButton } from "@refinedev/chakra-ui";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Show, Breadcrumb } from "@refinedev/chakra-ui";\nimport { Box } from "@chakra-ui/react";\n\nconst CustomBreadcrumb: React.FC = () => {\n  return (\n    <Box borderColor="blue" borderStyle="dashed" borderWidth="2px">\n      <Breadcrumb />\n    </Box>\n  );\n};\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      breadcrumb={<CustomBreadcrumb />}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <RefineHeadlessDemo\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/breadcrumb"},(0,o.yg)("inlineCode",{parentName:"a"},"Breadcrumb")," documentation ","\u2192")))),(0,o.yg)("h3",{id:"wrapperprops"},"wrapperProps"),(0,o.yg)(h,{id:"wrapperprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If you want to customize the wrapper of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"wrapperProps")," property. For ",(0,o.yg)("inlineCode",{parentName:"p"},"@refinedev/chakra-ui")," wrapper element is ",(0,o.yg)("inlineCode",{parentName:"p"},"<Box>"),"s and ",(0,o.yg)("inlineCode",{parentName:"p"},"wrapperProps")," can get every attribute that ",(0,o.yg)("inlineCode",{parentName:"p"},"<Card>")," can get."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@refinedev/core";\nimport { ShowButton } from "@refinedev/chakra-ui";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Show } from "@refinedev/chakra-ui";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      wrapperProps={{\n        borderColor: "blue",\n        borderStyle: "dashed",\n        borderWidth: "2px",\n        p: "2",\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <RefineHeadlessDemo\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://www.chakra-ui.com/docs/components/box#usage"},(0,o.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Chakra UI #8594")))),(0,o.yg)("h3",{id:"headerprops"},"headerProps"),(0,o.yg)(h,{id:"headerprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If you want to customize the header of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@refinedev/core";\nimport { ShowButton } from "@refinedev/chakra-ui";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Show } from "@refinedev/chakra-ui";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      headerProps={{\n        borderColor: "blue",\n        borderStyle: "dashed",\n        borderWidth: "2px",\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <RefineHeadlessDemo\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://www.chakra-ui.com/docs/components/box#usage"},(0,o.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Chakra UI ","\u2192")))),(0,o.yg)("h3",{id:"contentprops"},"contentProps"),(0,o.yg)(h,{id:"contentprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"If you want to customize the content of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"contentProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@refinedev/core";\nimport { ShowButton } from "@refinedev/chakra-ui";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Show } from "@refinedev/chakra-ui";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      contentProps={{\n        borderColor: "blue",\n        borderStyle: "dashed",\n        borderWidth: "2px",\n        p: "2",\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <RefineHeadlessDemo\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://www.chakra-ui.com/docs/components/box#usage"},(0,o.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Chakra UI ","\u2192")))),(0,o.yg)("h3",{id:"headerbuttons"},"headerButtons"),(0,o.yg)(h,{id:"headerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"By default, the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Show/>")," component has a ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton>")),", ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/edit-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<EditButton>")),", ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>")),", and a",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/refresh-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<RefreshButton>"))," at the header."),(0,o.yg)("p",null,"You can customize the buttons at the header by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,o.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.yg)("inlineCode",{parentName:"p"},"({ defaultButtons, deleteButtonProps, editButtonProps, listButtonProps, refreshButtonProps }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.yg)("admonition",{title:"Implementation Tips",type:"simple"},(0,o.yg)("ul",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},'If the "list" resource is not defined, the ',(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton>"))," will not render and ",(0,o.yg)("inlineCode",{parentName:"p"},"listButtonProps")," will be ",(0,o.yg)("inlineCode",{parentName:"p"},"undefined"),".")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"If ",(0,o.yg)("a",{parentName:"p",href:"#candelete-and-canedit"},(0,o.yg)("inlineCode",{parentName:"a"},"canDelete"))," is ",(0,o.yg)("inlineCode",{parentName:"p"},"false"),", the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>"))," will not render and ",(0,o.yg)("inlineCode",{parentName:"p"},"deleteButtonProps")," will be ",(0,o.yg)("inlineCode",{parentName:"p"},"undefined"),".")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"If ",(0,o.yg)("a",{parentName:"p",href:"#candelete-and-canedit"},(0,o.yg)("inlineCode",{parentName:"a"},"canEdit"))," is ",(0,o.yg)("inlineCode",{parentName:"p"},"false"),", ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/edit-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<EditButton>"))," will not render and ",(0,o.yg)("inlineCode",{parentName:"p"},"editButtonProps")," will be ",(0,o.yg)("inlineCode",{parentName:"p"},"undefined"),".")))),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@refinedev/core";\nimport { ShowButton } from "@refinedev/chakra-ui";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Show } from "@refinedev/chakra-ui";\nimport { Button, HStack, Box } from "@chakra-ui/react";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      headerButtons={({ defaultButtons }) => (\n        <HStack>\n          {defaultButtons}\n          <Button colorScheme="red">Custom Button</Button>\n        </HStack>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <RefineHeadlessDemo\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,o.yg)("p",null,"Or, instead of using the ",(0,o.yg)("inlineCode",{parentName:"p"},"defaultButtons"),", you can create your own buttons. If you want, you can use ",(0,o.yg)("inlineCode",{parentName:"p"},"createButtonProps")," to utilize the default values of the ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/list-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<ListButton>")),", ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/edit-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<EditButton>")),", ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/delete-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<DeleteButton>")),", and, ",(0,o.yg)("a",{parentName:"p",href:"/docs/ui-integrations/chakra-ui/components/buttons/refresh-button"},(0,o.yg)("inlineCode",{parentName:"a"},"<RefreshButton>"))," components."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@refinedev/core";\nimport { ShowButton } from "@refinedev/chakra-ui";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport {\n  Show,\n  ListButton,\n  EditButton,\n  DeleteButton,\n  RefreshButton,\n} from "@refinedev/chakra-ui";\nimport { Button, HStack, Box } from "@chakra-ui/react";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      headerButtons={({\n        deleteButtonProps,\n        editButtonProps,\n        listButtonProps,\n        refreshButtonProps,\n      }) => (\n        <HStack>\n          {listButtonProps && (\n            <ListButton {...listButtonProps} meta={{ foo: "bar" }} />\n          )}\n          {editButtonProps && (\n            <EditButton {...editButtonProps} meta={{ foo: "bar" }} />\n          )}\n          {deleteButtonProps && (\n            <DeleteButton {...deleteButtonProps} meta={{ foo: "bar" }} />\n          )}\n          <RefreshButton {...refreshButtonProps} meta={{ foo: "bar" }} />\n          <Button colorScheme="red">Custom Button</Button>\n        </HStack>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <RefineHeadlessDemo\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,o.yg)("h3",{id:"headerbuttonprops"},"headerButtonProps"),(0,o.yg)(h,{id:"headerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can customize the wrapper element of the buttons at the header by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"headerButtonProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@refinedev/core";\nimport { ShowButton } from "@refinedev/chakra-ui";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Show } from "@refinedev/chakra-ui";\nimport { Button } from "@chakra-ui/react";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      headerButtonProps={{\n        borderColor: "blue",\n        borderStyle: "dashed",\n        borderWidth: "2px",\n        p: "2",\n      }}\n      // highlight-end\n      headerButtons={\n        <Button variant="outline" colorScheme="green">\n          Custom Button\n        </Button>\n      }\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <RefineHeadlessDemo\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://www.chakra-ui.com/docs/components/box#usage"},(0,o.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Chakra UI ","\u2192")))),(0,o.yg)("h3",{id:"footerbuttons"},"footerButtons"),(0,o.yg)(h,{id:"footerbuttons",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can customize the buttons at the footer by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"footerButtons")," property. It accepts ",(0,o.yg)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.yg)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@refinedev/core";\nimport { ShowButton } from "@refinedev/chakra-ui";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Show } from "@refinedev/chakra-ui";\nimport { Button, HStack } from "@chakra-ui/react";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      footerButtons={({ defaultButtons }) => (\n        <HStack borderColor="blue" borderStyle="dashed" borderWidth="2px" p="2">\n          {defaultButtons}\n          <Button colorScheme="red" variant="solid">\n            Custom Button\n          </Button>\n        </HStack>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <RefineHeadlessDemo\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n'))),(0,o.yg)("h3",{id:"footerbuttonprops"},"footerButtonProps"),(0,o.yg)(h,{id:"footerbuttonprops",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)("p",null,"You can customize the wrapper element of the buttons at the footer by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"footerButtonProps")," property."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/show/123 previewHeight=280px",live:!0,url:"http://localhost:3000/posts/show/123",previewHeight:"280px"},'setInitialRoutes(["/posts/show/123"]);\nimport { Refine } from "@refinedev/core";\nimport { ShowButton } from "@refinedev/chakra-ui";\nimport dataProvider from "@refinedev/simple-rest";\n\n// visible-block-start\nimport { Show } from "@refinedev/chakra-ui";\nimport { Button } from "@chakra-ui/react";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      footerButtonProps={{\n        style: {\n          float: "right",\n          borderColor: "blue",\n          borderStyle: "dashed",\n          borderWidth: "2px",\n          padding: "8px",\n        },\n      }}\n      // highlight-end\n      footerButtons={<Button colorScheme="green">Custom Button</Button>}\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nconst App = () => {\n  return (\n    <RefineHeadlessDemo\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          show: PostShow,\n          list: DummyListPage,\n        },\n      ]}\n    />\n  );\n};\nrender(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n);\n')),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://www.chakra-ui.com/docs/components/box#usage"},(0,o.yg)("inlineCode",{parentName:"a"},"Box")," documentation from Chakra UI ","\u2192")))),(0,o.yg)("h2",{id:"api-reference"},"API Reference"),(0,o.yg)("h3",{id:"props"},"Props"),(0,o.yg)(h,{id:"props",mdxType:"DocThumbsUpDownFeedbackWidget"},(0,o.yg)(g,{module:"@refinedev/chakra-ui/Show","title-default":"<Title order={3}>Show {resource.name}</Title>",mdxType:"PropsTable"})))}v.isMDXComponent=!0}}]);